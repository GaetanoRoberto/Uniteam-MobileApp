Index: app/src/main/java/it/polito/uniteam/MainActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package it.polito.uniteam\r\n\r\nimport android.Manifest\r\nimport android.content.pm.PackageManager\r\nimport android.content.res.Configuration\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport androidx.activity.ComponentActivity\r\nimport androidx.activity.compose.setContent\r\nimport androidx.activity.result.ActivityResult\r\nimport androidx.activity.result.contract.ActivityResultContracts\r\nimport androidx.activity.viewModels\r\nimport androidx.compose.foundation.gestures.detectTapGestures\r\nimport androidx.compose.foundation.isSystemInDarkTheme\r\nimport androidx.compose.foundation.layout.fillMaxSize\r\nimport androidx.compose.material3.MaterialTheme\r\nimport androidx.compose.material3.Surface\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.platform.LocalFocusManager\r\nimport androidx.core.app.ActivityCompat\r\nimport androidx.core.content.ContextCompat\r\nimport androidx.lifecycle.viewmodel.compose.viewModel\r\nimport it.polito.uniteam.gui.userprofile.UserProfileScreen\r\nimport it.polito.uniteam.ui.theme.UniTeamTheme\r\nimport java.io.File\r\nimport java.util.concurrent.ExecutorService\r\nimport java.util.concurrent.Executors\r\nimport androidx.compose.foundation.interaction.MutableInteractionSource\r\nimport androidx.compose.foundation.layout.Arrangement\r\nimport androidx.compose.foundation.layout.Column\r\nimport androidx.compose.foundation.layout.Row\r\nimport androidx.compose.foundation.layout.fillMaxWidth\r\nimport androidx.compose.foundation.layout.height\r\nimport androidx.compose.material.icons.Icons\r\nimport androidx.compose.material.icons.filled.ArrowBack\r\nimport androidx.compose.material.icons.filled.Edit\r\nimport androidx.compose.material.icons.filled.Notifications\r\nimport androidx.compose.material3.BottomAppBar\r\nimport androidx.compose.material3.Button\r\nimport androidx.compose.material3.ButtonDefaults\r\nimport androidx.compose.material3.ExperimentalMaterial3Api\r\nimport androidx.compose.material3.Icon\r\nimport androidx.compose.material3.IconButton\r\nimport androidx.compose.material3.IconButtonDefaults\r\nimport androidx.compose.material3.Text\r\nimport androidx.compose.material3.TopAppBar\r\nimport androidx.compose.material3.TopAppBarDefaults\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.remember\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.input.pointer.pointerInput\r\nimport androidx.compose.ui.platform.LocalContext\r\nimport androidx.compose.ui.unit.dp\r\nimport it.polito.uniteam.gui.calendar.Calendar\r\nimport it.polito.uniteam.gui.calendar.CalendarAppContainer\r\nimport it.polito.uniteam.gui.showtaskdetails.TaskScreen\r\nimport it.polito.uniteam.gui.tasklist.TaskListView\r\n\r\nclass MainActivity : ComponentActivity() {\r\n\r\n    private lateinit var outputDirectory: File\r\n    private var cameraExecutor: ExecutorService = Executors.newSingleThreadExecutor();\r\n    private val vm: UserProfileScreen by viewModels()\r\n    private val vm2: Calendar by viewModels()\r\n\r\n    private val pickImageLauncher = registerForActivityResult(ActivityResultContracts.StartActivityForResult()) { activity: ActivityResult? ->\r\n        // Handle the selected image URI here\r\n        val uri = activity?.data?.data\r\n        if (uri != null) {\r\n            // Image picked successfully, do something with the URI\r\n            vm.setUri(uri)\r\n        }\r\n        vm.openGallery(false)\r\n    }\r\n    private val requestPermissionLauncher = registerForActivityResult(\r\n        ActivityResultContracts.RequestPermission()\r\n    ) { isGranted ->\r\n        if (isGranted) {\r\n            Log.i(\"Uniteam\", \"Permission granted\")\r\n        } else {\r\n            Log.i(\"Uniteam\", \"Permission denied\")\r\n        }\r\n    }\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n\r\n        setContent {\r\n            val interactionSource = remember { MutableInteractionSource() }\r\n            val focusManager = LocalFocusManager.current\r\n            val theme = isSystemInDarkTheme()\r\n            UniTeamTheme(darkTheme = theme){\r\n            Surface(\r\n                modifier = Modifier\r\n                    .fillMaxSize()\r\n                    // remove the focus and the opened photo/gallery menu\r\n                    .pointerInput(Unit, interactionSource) {\r\n                        detectTapGestures(\r\n                            onPress = {\r\n                                if (vm.cameraPressed) {\r\n                                    vm.toggleCameraButtonPressed()\r\n                                }\r\n                                focusManager.clearFocus()\r\n                            }\r\n                        )\r\n                    },\r\n                color = MaterialTheme.colorScheme.background\r\n            ) {\r\n                Column(\r\n                    modifier = Modifier.fillMaxSize()\r\n                ) {\r\n                    Column(\r\n                        modifier = Modifier.weight(1f)\r\n                    ) {\r\n                        MyTopAppBar()\r\n                        /*FormScreen(\r\n                            vm = viewModel(),\r\n                            outputDirectory = getOutputDirectory(),\r\n                            cameraExecutor = cameraExecutor,\r\n                            pickImageLauncher = pickImageLauncher\r\n                        )*/\r\n                        //CalendarAppContainer(vm = viewModel())\r\n                        //TaskScreen(vm = viewModel())\r\n                        TaskListView(vm = viewModel())\r\n                    }\r\n                    BottomBar()\r\n                }}\r\n            }\r\n        }\r\n\r\n        requestCameraPermission()\r\n    }\r\n\r\n    private fun requestCameraPermission() {\r\n        when {\r\n            ContextCompat.checkSelfPermission(\r\n                this,\r\n                Manifest.permission.CAMERA\r\n            ) == PackageManager.PERMISSION_GRANTED -> {\r\n                Log.i(\"Uniteam\", \"Permission previously granted\")\r\n                //vm.shouldShowCamera.value = true\r\n            }\r\n\r\n            ActivityCompat.shouldShowRequestPermissionRationale(\r\n                this,\r\n                Manifest.permission.CAMERA\r\n            ) -> Log.i(\"Uniteam\", \"Show camera permissions dialog\")\r\n\r\n            else -> requestPermissionLauncher.launch(Manifest.permission.CAMERA)\r\n        }\r\n    }\r\n\r\n    private fun getOutputDirectory(): File {\r\n        val mediaDir = externalMediaDirs.firstOrNull()?.let {\r\n            File(it, resources.getString(R.string.app_name)).apply { mkdirs() }\r\n        }\r\n\r\n        return if (mediaDir != null && mediaDir.exists()) mediaDir else filesDir\r\n    }\r\n\r\n    override fun onDestroy() {\r\n        super.onDestroy()\r\n        cameraExecutor.shutdown()\r\n    }\r\n}\r\n\r\n\r\n@OptIn(ExperimentalMaterial3Api::class)\r\n@Composable\r\nfun MyTopAppBar(vm: UserProfileScreen = viewModel()) {\r\n    TopAppBar(\r\n        title = {\r\n            Row(\r\n                modifier = Modifier.fillMaxWidth(),\r\n                horizontalArrangement = Arrangement.Center, // Allinea orizzontalmente il contenuto al centro\r\n                verticalAlignment = Alignment.CenterVertically // Allinea verticalmente il contenuto al centro\r\n            ) {\r\n                Text(\"UNITEAM\")\r\n            }\r\n        },\r\n        colors = TopAppBarDefaults.topAppBarColors(containerColor = MaterialTheme.colorScheme.primary),\r\n        navigationIcon = {\r\n            IconButton(onClick = { /* Azione per tornare indietro */ }, colors = IconButtonDefaults.iconButtonColors(MaterialTheme.colorScheme.secondary)) {\r\n                Icon(imageVector = Icons.Filled.ArrowBack, contentDescription = \"Back\", tint = MaterialTheme.colorScheme.onSecondary)\r\n            }\r\n        },\r\n        actions = {\r\n            if (vm.isEditing) {\r\n                Button(onClick = { vm.validate() }, colors = ButtonDefaults.buttonColors(containerColor = MaterialTheme.colorScheme.secondary)) {\r\n                    Text(\"Done\", color = MaterialTheme.colorScheme.onSecondary)\r\n                }\r\n            } else {\r\n                IconButton(onClick = { vm.edit() }, colors = IconButtonDefaults.iconButtonColors(MaterialTheme.colorScheme.secondary)) {\r\n                    Icon(imageVector = Icons.Default.Edit, contentDescription = \"Edit\", tint = MaterialTheme.colorScheme.onSecondary)\r\n                }\r\n            }\r\n        }\r\n    )\r\n}\r\n@Composable\r\nfun BottomBar(vm: UserProfileScreen = viewModel()){\r\n    BottomAppBar(\r\n        modifier = Modifier.height(56.dp),\r\n        containerColor = MaterialTheme.colorScheme.primary,\r\n        content = {\r\n            Row(\r\n                modifier = Modifier\r\n                    .fillMaxWidth(),\r\n                horizontalArrangement = Arrangement.SpaceAround,\r\n                verticalAlignment = Alignment.CenterVertically\r\n            ) {\r\n\r\n                Button(onClick = {}, colors = ButtonDefaults.buttonColors(containerColor = MaterialTheme.colorScheme.secondary)) {\r\n                    Text(text = \"TEAMS\")\r\n                }\r\n                Button(onClick = { /*TODO*/ }, colors = ButtonDefaults.buttonColors(containerColor = MaterialTheme.colorScheme.secondary)) {\r\n                    Text(text = \"TASKS\")\r\n                }\r\n                IconButton(onClick = { /*TODO*/ }, colors = IconButtonDefaults.iconButtonColors(containerColor = MaterialTheme.colorScheme.secondary)) {\r\n                    Icon(Icons.Default.Notifications, contentDescription = \"Notifications\")\r\n                }\r\n\r\n\r\n            }\r\n        }\r\n    )\r\n}\r\n\r\n@Composable\r\nfun isVertical(): Boolean {\r\n    val context = LocalContext.current\r\n    return context.resources.configuration.orientation == Configuration.ORIENTATION_PORTRAIT\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/it/polito/uniteam/MainActivity.kt b/app/src/main/java/it/polito/uniteam/MainActivity.kt
--- a/app/src/main/java/it/polito/uniteam/MainActivity.kt	
+++ b/app/src/main/java/it/polito/uniteam/MainActivity.kt	
@@ -3,13 +3,16 @@
 import android.Manifest
 import android.content.pm.PackageManager
 import android.content.res.Configuration
+import android.os.Build
 import android.os.Bundle
 import android.util.Log
 import androidx.activity.ComponentActivity
 import androidx.activity.compose.setContent
 import androidx.activity.result.ActivityResult
+import androidx.activity.result.ActivityResultLauncher
 import androidx.activity.result.contract.ActivityResultContracts
 import androidx.activity.viewModels
+import androidx.annotation.RequiresApi
 import androidx.compose.foundation.gestures.detectTapGestures
 import androidx.compose.foundation.isSystemInDarkTheme
 import androidx.compose.foundation.layout.fillMaxSize
@@ -72,6 +75,13 @@
         }
         vm.openGallery(false)
     }
+    private var arePermissionGranted = arrayOf(false,false,false)
+    private lateinit var permissionLauncher : ActivityResultLauncher<Array<String>>
+    val permissions = listOf(Manifest.permission.CAMERA,
+        Manifest.permission.WRITE_EXTERNAL_STORAGE,
+        Manifest.permission.MANAGE_EXTERNAL_STORAGE,
+        Manifest.permission.READ_EXTERNAL_STORAGE)
+
     private val requestPermissionLauncher = registerForActivityResult(
         ActivityResultContracts.RequestPermission()
     ) { isGranted ->
@@ -120,33 +130,41 @@
                             pickImageLauncher = pickImageLauncher
                         )*/
                         //CalendarAppContainer(vm = viewModel())
-                        //TaskScreen(vm = viewModel())
-                        TaskListView(vm = viewModel())
+                        TaskScreen(vm = viewModel())
+                        //TaskListView(vm = viewModel())
                     }
                     BottomBar()
                 }}
             }
         }
 
-        requestCameraPermission()
+        permissionLauncher = registerForActivityResult(ActivityResultContracts.RequestMultiplePermissions()){
+            grantedPermissions ->
+            Log.i("diooo",grantedPermissions.toString())
+            for (permissionIndex in 0 until grantedPermissions.size) {
+                arePermissionGranted[permissionIndex] = grantedPermissions[permissions[permissionIndex]] == true
+            }
+        }
+
+        requestPermissions()
     }
 
-    private fun requestCameraPermission() {
-        when {
-            ContextCompat.checkSelfPermission(
+    private fun requestPermissions() {
+        val permissionRequest: MutableList<String> = ArrayList()
+
+        for (permissionIndex in arePermissionGranted.indices) {
+            arePermissionGranted[permissionIndex] = ContextCompat.checkSelfPermission(
                 this,
-                Manifest.permission.CAMERA
-            ) == PackageManager.PERMISSION_GRANTED -> {
-                Log.i("Uniteam", "Permission previously granted")
-                //vm.shouldShowCamera.value = true
+                permissions[permissionIndex]
+            ) == PackageManager.PERMISSION_GRANTED
+
+            if (!arePermissionGranted[permissionIndex]) {
+                permissionRequest.add(permissions[permissionIndex])
             }
+        }
 
-            ActivityCompat.shouldShowRequestPermissionRationale(
-                this,
-                Manifest.permission.CAMERA
-            ) -> Log.i("Uniteam", "Show camera permissions dialog")
-
-            else -> requestPermissionLauncher.launch(Manifest.permission.CAMERA)
+        if(permissionRequest.isNotEmpty()) {
+            permissionLauncher.launch(permissionRequest.toTypedArray())
         }
     }
 
Index: app/src/main/res/mipmap-anydpi/ic_launcher.xml
===================================================================
diff --git a/app/src/main/res/mipmap-anydpi/ic_launcher.xml b/app/src/main/res/mipmap-anydpi/ic_launcher.xml
deleted file mode 100644
--- a/app/src/main/res/mipmap-anydpi/ic_launcher.xml	
+++ /dev/null	
@@ -1,6 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
-    <background android:drawable="@drawable/ic_launcher_background" />
-    <foreground android:drawable="@drawable/ic_launcher_foreground" />
-    <monochrome android:drawable="@drawable/ic_launcher_foreground" />
-</adaptive-icon>
\ No newline at end of file
Index: app/src/main/res/mipmap-anydpi/ic_launcher_round.xml
===================================================================
diff --git a/app/src/main/res/mipmap-anydpi/ic_launcher_round.xml b/app/src/main/res/mipmap-anydpi/ic_launcher_round.xml
deleted file mode 100644
--- a/app/src/main/res/mipmap-anydpi/ic_launcher_round.xml	
+++ /dev/null	
@@ -1,6 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
-    <background android:drawable="@drawable/ic_launcher_background" />
-    <foreground android:drawable="@drawable/ic_launcher_foreground" />
-    <monochrome android:drawable="@drawable/ic_launcher_foreground" />
-</adaptive-icon>
\ No newline at end of file
